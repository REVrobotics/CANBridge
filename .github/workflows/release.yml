name: Create release

on:
  push:
    tags:
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      TAG_NAME: ${{ env.TAG_NAME }}
      VERSION: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Wait for build workflow to finish
        uses: actions/github-script@v4
        with:
          script: |
            const { data: runs } = await github.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build.yml',
              branch: 'refs/heads/main',
              status: 'completed',
              per_page: 1
            });
            if (runs.workflow_runs.length === 0) {
              core.setFailed('No build workflow runs found');
            }
            core.setOutput('run_id', runs.workflow_runs[0].id);

      - name: Get tag name
        run: |
          echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      # Download artifacts from build workflow
      - name: Download workflow artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build.yml
          commit: ${{ github.sha }}
          path: '.'

      # Get publish.gradle version
      - name: Get publish.gradle version
        id: get-version
        run: |
          echo "version=$(cat version/version.txt)" >> $GITHUB_OUTPUT
          echo "expectedTagName=v$(cat version/version.txt)" >> $GITHUB_OUTPUT

  prepare-release:
    runs-on: ubuntu-latest
    needs: check-versions
    steps:
      # Download API, docs, and version.txt
      - name: Download workflow artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build.yml
          commit: ${{ github.sha }}
          path: '.'

      # This step is to check what files are downloaded and how they are structured, as well as binary sizes for releases
      - name: List files
        run: |
          ls -Rlh

      # Create new release draft
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          files: |
            **/**

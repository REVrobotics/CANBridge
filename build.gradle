// When updating WPILib, be sure to also update wpiHalVersion.txt
plugins {
  id 'c'
  id 'cpp'
  id 'java'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
  id 'edu.wpi.first.NativeUtils' version '2023.11.1'
  id 'edu.wpi.first.GradleJni' version '1.1.0'
  id 'edu.wpi.first.GradleVsCode' version '1.3.0'
  id 'google-test-test-suite'
}

allprojects {
    repositories {
        mavenCentral()
    }
    if (project.hasProperty('releaseMode')) {
        wpilibRepositories.addAllReleaseRepositories(it)
    } else {
        wpilibRepositories.addAllDevelopmentRepositories(it)
    }
}

apply from: 'config.gradle'

apply from: 'dependencies.gradle'

nativeUtils {
  exportsConfigs {
      CANBridge {
      }
  }
}

model {
  //libraries {
  //    candle_dll(NativeLib) {
  //    libraryName = 'candle_dll'
  //    targetPlatform = 'windowsx86-64'
  //    sharedMatchers << '**/*.lib'
  //    dynamicMatchers << '**/*.dll'
  //    file = project.file('lib/candle_dll/')
  //    }
  //}
  components {
    CANBridge(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDir 'src/main/native/include'
            srcDir 'src/main/native/include/candlelib'
            srcDir 'src/main/native/include/serial'
          }
        }
        libuvCpp(CSourceSet) {
          source {
            srcDirs 'src/main/native/c/candlelib/'
            include '**/*.c'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include/candlelib'
          }
        }
        serial(CppSourceSet) {
          source {
            srcDirs 'src/main/native/cpp/serial/'
            include '**/*.cc'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include/serial'
          }
        }
      }
      binaries.all {
        if (it.targetPlatform.name == 'osxuniversal') {
          linker.args '-framework', 'IOKit'
        }
        if (it.targetPlatform.name == nativeUtils.wpi.platforms.roborio) {
          it.buildable = false
        }
      }

      nativeUtils.useRequiredLibrary(it, "driver_shared")
    }
  }

  testSuites {
    CANBridgeTest(GoogleTestTestSuiteSpec) {
      testing $.components.CANBridge
      sources.cpp {
        source {
          srcDir 'src/test/gtest/cpp'
          include '**/*.cpp'
        }
        exportedHeaders {
          srcDirs 'src/test/gtest/include/'
        }
      }

      binaries.all {
        if (it.targetPlatform.name == nativeUtils.wpi.platforms.roborio
            || it.targetPlatform.name == nativeUtils.wpi.platforms.linuxarm32
            || it.targetPlatform.name == nativeUtils.wpi.platforms.linuxarm64) {
          it.buildable = false
        }
        // lib library: "SparkMaxDriver", linkage: 'shared'
      }
      nativeUtils.useRequiredLibrary(it, "driver_shared", "googletest_static")
    }
  }
}

apply from: 'publish.gradle'

wrapper {
  gradleVersion = '7.5.1'
}
